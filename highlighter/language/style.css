/*
// Rule names, +: used in CSS, ?: unused:
+ literal.string (base.string-c, base.string-c, base.apostrophe-string, base.apostrophe-string, css, css, html, javascript, javascript, json, json, pascal, pascal)
+ literal.escape (base.string-c, base.string-c, base.apostrophe.character, base.apostrophe.character, base.apostrophe-string, base.apostrophe-string, javascript, javascript)
+ constant.value.character (base.apostrophe.character, base.apostrophe.character)
+ comment.text (base.comment-c, base.comment-c, base.comment-number-sign, base.comment-number-sign, css, css, pascal, pascal)
+ comment.block (base.comment-block-c, base.comment-block-c, html, html)
+ constant.value.numeric (base.numeric, base.numeric)
+ preprocessor.keyword (c, c, cpp, cpp, csharp)
+ meta.preprocessor (c, c)
+ keyword (c, c, cpp, cpp, csharp, csharp, java, java, java, javascript, javascript, javascript, pascal, pascal)
+ storage.type (c, c)
+ entity.name.function (c, c, javascript)
? storage.modifier (c, c)
+ preprocessor.value (csharp)
? type.keyword (csharp, csharp)
+ literal.keyword (csharp, csharp, java, java, javascript)
? constant.numeric (css)
+ unit (css)
? support.css-property (css, css)
? support.vendor-prefix (css, css)
? support.css-value (css)
? source.php (html, html)
? variable.language.php-tag (html, html)
? php (html)
? source.css (html, html)
? support.tag.style (html, html, html, html)
? css (html)
+ entity.tag.style (html)
? source.js (html, html)
? support.tag.script (html, html, html, html)
? javascript (html)
+ entity.tag.script (html)
? support.tag.open (html)
? support.tag.close (html)
+ support.tag (html, html, html)
? support.tag.special (html)
+ support.tag-name (html)
+ support.attribute (html, html)
? support.operator (html, html)
+ literal.quote (html, html)
? support.value (html)
? support.namespace (java)
? char (java, java)
? integer (java, java)
? support.annotation (java, java)
+ entity.function (java)
? entity.class (java, java)
+ operator (java, java, json, json, pascal, pascal)
+ magic.strict (javascript)
+ property (json, json)
+ comment.block.pascal (pascal, pascal)
+ pascal.assignment (pascal, pascal)
*/