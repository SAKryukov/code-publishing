pre span.magic.strict.highlighter
{
    color: darkviolet;
    font-weight: bold;
}

pre span.comment.highlighter,
pre span.comment.block.highlighter,
pre span.comment.single.php.alternative.highlighter,
pre span.comment.html.highlighter
{
    color: green;
}
pre span.comment.block.pascal.highlighter
{
    color: #367
}

pre span.keyword.highlighter,
pre span.selector.highlighter,
pre span.storage.module.highlighter,
pre span.storage.class.highlighter,
pre span.storage.function.highlighter
{
    color: blue;
    font-weight: normal;
}

pre span._custom-word_.highlighter {
    color: slateBlue;
}

pre span.type.keyword.highlighter
{
    color: darkviolet;
}

pre span.constant.keyword.highlighter,
pre span.constant.value.numeric.highlighter,
pre span.constant.value.character.highlighter
{
    font-weight: normal;
    color: darkRed;
}

/* ???????????????????????????????????????????????????? */

pre span.entity.label.highlighter
{
    background-color: red;
}

pre span.preprocessor.keyword.highlighter
{
    color: steelBlue;
    font-weight: bold
}

pre span.operator.highlighter
{
    color: darkMagenta;    
}

pre span.keyword.operator.highlighter
{
    color: darkRed;
    font-weight: normal;
}

pre span.property.highlighter,
pre span.constant.language.highlighter
{
    color: #038;
    font-weight: bold
}

pre span.constant.symbol.highlighter,
pre span.class.highlighter
{
    color: #036;
    font-weight: bold
}

pre span.keyword.namespace.highlighter,
pre span.entity.name.class.highlighter
{
    color: #B06;
    font-weight: bold
}

pre span.string.value.highlighter,
pre span.string.quote.highlighter,
pre span.string.character.escape.highlighter
{
    color: #AA3300;
}

pre span.comment.docstring.highlighter
{
    color: darkMagenta;
}

pre span.string.regexp.highlighter {
    background-color: #FFF0FF;
    color: #808
}

pre span.variable.highlighter,
pre span.variable.instance.highlighter
{
    color: #33B
}

pre span.entity.name.function.highlighter {
    color: #06B;
    font-weight: bold
}

pre span.support.tag.highlighter,
pre span.support.tag-name.highlighter,
pre span.entity.tag.script.highlighter,
pre span.entity.tag.style.highlighter
{
    color: #070
}

pre span.support.attribute.highlighter
{
    color: #007;
    font-style: italic
}

pre span.entity.name.tag.highlighter,
pre span.storage.type.highlighter
{
    color: #070;
    font-weight: bold
}

pre span.variable.self.highlighter,
pre span.support.function.highlighter {
    color: #038;
    font-weight: bold
}

pre span.entity.function.highlighter,
pre span.support.magic.highlighter
{
    color: #C00;
    font-weight: bold
}

pre span.preprocessor.highlighter,
pre span.meta.preprocessor.highlighter
{
    color: rebeccaPurple;
    font-weight: bold
}

pre span.pascal.assignment.highlighter
{
    color: blue;
    font-weight: bold
}

/* Visual Studio:
VS C#, JavaScript: )
Types: steel blue rgb(43, 145, 175)
Well-known types and reserved words: blue 0x0000FF
Comment: green 0x00FF00
String: darkRed, rgb(163, 21, 21)
Url in comments: darker blue
preprocessor: gray
---
VS C++:
Same
keywords: magenta/violet rgb(143, 8, 196)
Macros: rgb(138, 27, 255)
Operator functions: 0x00FFFF
---
VS JSON:
properties: blue rgb(46, 117, 182)
string as above
---
VS Java:
Same 
Types and function names: steel blue
---
VS CSS: comment: rgb(0, 100, 0)
CSS: keyword: 0xFF00FF
CSS: property: red
CSS: value: blue
CSS: selector: rgb(128, 0, 0)
CSS: string: blue
---
VS HTML:
comment: rgb(0, 100, 0)
element name: rgb(128, 0, 0)
entity: red
operator: blue
tag delimiter: blue
---
VS General:
User types: rgb(43, 145, 175)
String: darkRed, rgb(163, 21, 21)
*/

/* reduced language set:
string.value (base.string-c)
string.character.escape (base.string-c)
constant.value.character (base.apostrophe.character)
comment (base.comment-c)
comment.block (base.comment-block-c)
constant.value.numeric (base.numeric)
preprocessor.keyword (c)
meta.preprocessor (c)
keyword (c)
storage.modifier (c)
support.type (c)
type.keyword (csharp)
constant.keyword (csharp)
constant.hex-color (css)
string (css)
support.css-property (css)
source.php.embedded (html)
source.css.embedded (html)
source.js.embedded (html)
comment.html (html)
support.tag (html)
constant (java)
char (java)
integer (java)
support.annotation (java)
entity.class (java)
operator (java)
magic.strict (javascript)
property (json)
comment.block.pascal (pascal)
keyword.operator (pascal)
pascal.assignment (pascal)
*/