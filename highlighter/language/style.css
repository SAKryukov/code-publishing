pre span.magic.strict.highlighter
{
    color: darkviolet;
    font-weight: bold;
}

pre span.comment.highlighter,
pre span.comment.block.highlighter,
pre span.comment.single.php.alternative.highlighter,
pre span.comment.html.highlighter
{
    color: #888
}
pre span.comment.block.pascal.highlighter
{
    color: #367
}

pre span.keyword.highlighter,
pre span.selector.highlighter,
pre span.storage.module.highlighter,
pre span.storage.class.highlighter,
pre span.storage.function.highlighter
{
    color: #080;
    font-weight: bold
}

pre span.entity.label.highlighter
{
    background-color: red;
    color: yellow;
}

pre span.preprocessor.keyword.highlighter
{
    color: steelBlue;
    font-weight: bold
}

pre span.operator.highlighter
{
    color: darkMagenta;    
}

pre span.keyword.operator.highlighter
{
    color: darkRed;
    font-weight: normal;
}

pre span.property.highlighter,
pre span.constant.language.highlighter
{
    color: #038;
    font-weight: bold
}

pre span.constant.symbol.highlighter,
pre span.class.highlighter,
pre span.constant.highlighter {
    color: #036;
    font-weight: bold
}

pre span.keyword.namespace.highlighter,
pre span.entity.name.class.highlighter
{
    color: #B06;
    font-weight: bold
}

pre span.constant.numeric.highlighter {
    color: #00D;
    font-weight: bold
}

pre span.string.highlighter,
pre span.string.character.escape.highlighter
{
    color: #AA3300;
}

pre span.comment.docstring.highlighter
{
    color: darkMagenta;
}

pre span.string.regexp.highlighter {
    background-color: #FFF0FF;
    color: #808
}

pre span.variable.highlighter,
pre span.variable.instance.highlighter
{
    color: #33B
}

pre span.entity.name.function.highlighter {
    color: #06B;
    font-weight: bold
}

pre span.support.tag.highlighter,
pre span.support.tag-name.highlighter,
pre span.entity.tag.script.highlighter,
pre span.entity.tag.style.highlighter
{
    color: #070
}

pre span.support.attribute.highlighter
{
    color: #007;
    font-style: italic
}

pre span.entity.name.tag.highlighter,
pre span.storage.type.highlighter
{
    color: #070;
    font-weight: bold
}

pre span.variable.self.highlighter,
pre span.support.function.highlighter {
    color: #038;
    font-weight: bold
}

pre span.entity.function.highlighter,
pre span.support.magic.highlighter
{
    color: #C00;
    font-weight: bold
}

pre span.preprocessor.highlighter,
pre span.meta.preprocessor.highlighter
{
    color: rebeccaPurple;
    font-weight: bold
}

pre span.pascal.assignment.highlighter
{
    color: blue;
    font-weight: bold
}

/* must be implemented:

? marks not implemented, + marks implemented

? char (direct java)
+ comment (direct coffeescript, csharp, css, d, generic, go, haskell, haskell, java, lua, pascal, python, r, ruby, scheme, shell, smalltalk, sql)
+ comment.block (direct coffeescript, csharp)
+ comment.block.pascal (direct pascal)
+ comment.docstring (direct python)
+ comment.html (direct html)
+ (direct php, csharp, d, java, php, ruby)
+ constant (indirect ruby)
? constant.hex-color (direct css)
+ constant.language (direct coffeescript, generic, generic, json, lua, php, python, scheme)
+ constant.language (indirect r, ruby)
? constant.number (direct scheme, generic, generic, json, lua, ruby, smalltalk, sql)
+ constant.numeric (indirect css)
? constant.other (direct + indirect javascript)
+ constant.symbol (direct scheme)
+ constant.symbol (indirect r, ruby)
? entity.class (direct haskell, java)
+ entity.function (direct javascript)
+ entity.function (indirect java, javascript, r, scheme)
+ entity.label (direct c)
? entity.name.binary (direct smalltalk)
+ entity.name.class (direct smalltalk)
+ entity.name.class (indirect coffeescript, csharp, d, javascript, php, python, ruby)
+ entity.name.function (direct smalltalk)
+ entity.name.function (indirect generic, c, coffeescript, go, javascript, indirect lua, indirect php, indirect python, indirect ruby)
? entity.name.function.decorator (direct python)
? entity.name.function.magic (indirect php)
? entity.name.struct (indirect go)
? entity.name.type (indirect go)
? entity.other.inherited-class (indirect coffeescript, csharp, d, javascript, php, python, ruby)
? function.call (direct javascript, sql)
? function.call (indirect generic, r)
? integer (direct csharp, d, java)
+ keyword (direct c, cpp, csharp, d, go, haskell, haskell, java, javascript, pascal, php, sql)
+ keyword (indirect coffeescript, csharp, d, generic, go, haskell, java, javascript, lua, php, python, scheme, shell)
? keyword.constant (direct smalltalk)
? keyword.control (indirect python, ruby)
? keyword.control.pseudo-method (indirect ruby)
? keyword.dot (direct php)
? keyword.function (indirect coffeescript)
+ keyword.namespace (indirect csharp, d, php)
+ keyword.new (indirect coffeescript, csharp, d, php)
+ keyword.operator (direct coffeescript, generic, haskell, lua, pascal, r, ruby, shell, sql)
+ keyword.operator (indirect coffeescript, haskell, r)
? keyword.operator.initialize (direct go)
? keyword.operator.logical (indirect ruby)
? keyword.pseudovariable (direct smalltalk)
? keyword.special-method (indirect ruby)
? keyword.static (direct csharp, d, php)
? keyword.static (indirect php)
? keyword.unit (indirect css)
? keyword.unit (indirect css)
? keyword.variable.coffee (direct coffeescript)
+ magic.strict { direct javascript }
+ meta.preprocessor (direct haskell)
? namespace (indirect r)
+ operator (direct csharp, d, java)
? operator.delimiter (direct smalltalk)
+ pascal.assignment (direct pascal)
? plain (direct scheme)
+ preprocessor (direct csharp)
+ preprocessor.keyword (direct c, cpp)
+ property (direct json)
? reset (direct coffeescript)
? selector (direct javascript)
? shell (direct shell)
? source.css.embedded (direct html)
? source.js.embedded (direct html)
? source.php.embedded (direct html)
? storage (indirect r)
+ storage.class (indirect coffeescript, csharp, d, php, python, ruby)
+ storage.function (direct shell)
+ storage.function (indirect generic, go, lua, php, python, r, ruby, scheme)
? storage.modifier (direct c)
? storage.modifier (indirect csharp, d, php)
? storage.modifier.extends (indirect coffeescript, csharp, d,  javascript,  php)
+ storage.module (indirect ruby)
+ storage.type (direct go, javascript)
+ storage.type (indirect c, go, javascript)
+ storage.type.accessor (indirect javascript)
+ storage.type.class (indirect javascript)
? storage.type.function.arrow (direct javascript)
+ string (direct csharp, css, d, java, ruby, ruby, ruby, scheme, smalltalk)
+ string (indirect ruby, shell)
? string.block (direct coffeescript)
? string.character (direct smalltalk)
? string.quote (indirect html)
? string.regex (direct coffeescript)
+ string.regexp (direct javascript, ruby)
? string.symbol (direct smalltalk)
? string.value (indirect html)
? support (direct javascript, php)
? support.annotation (direct java)
+ support.attribute (indirect html)
? support.class (direct ruby)
? support.class.promise (direct javascript)
? support.command (direct shell)
? support.css-property (direct css)
? support.css-value (indirect css)
? support.exception.type (indirect python)
+ support.function (direct r)
+ support.function (indirect lua, php)
? support.function.python (direct python)
+ support.magic (direct+indirect python)
? support.namespace (indirect haskell, java)
? support.object (direct python)
? support.operator (indirect html)
? support.property (indirect javascript)
+ support.tag (direct html)
? support.tag.close (indirect html)
? support.tag.open (indirect html)
? support.type (direct c)
? support.value (indirect html)
? support.vendor-prefix (indirect css)
+ variable (indirect php, scheme)
? variable.class (direct ruby)
? variable.dollar-sign (indirect php)
? variable.global (direct ruby)
+ variable.instance (direct ruby)
? variable.language (indirect ruby)
? variable.language.php-tag (direct php)
? variable.language.super (direct javascript)
? variable.language.this (direct javascript)
+ variable.self (direct python)
? variable.type (indirect javascript)
*/

/* Visual Studio:
VS C#, JavaScript: )
Types: steel blue rgb(43, 145, 175)
Well-known types and reserved words: blue 0x0000FF
Comment: green 0x00FF00
String: darkRed, rgb(163, 21, 21)
Url in comments: darker blue
preprocessor: gray
---
VS C++:
Same
keywords: magenta/violet rgb(143, 8, 196)
Macros: rgb(138, 27, 255)
Operator functions: 0x00FFFF
---
VS JSON:
properties: blue rgb(46, 117, 182)
string as above
---
VS Java:
Same 
Types and function names: steel blue
---
VS CSS: comment: rgb(0, 100, 0)
CSS: keyword: 0xFF00FF
CSS: property: red
CSS: value: blue
CSS: selector: rgb(128, 0, 0)
CSS: string: blue
---
VS HTML:
comment: rgb(0, 100, 0)
element name: rgb(128, 0, 0)
entity: red
operator: blue
tag delimiter: blue
---
VS General:
User types: rgb(43, 145, 175)
String: darkRed, rgb(163, 21, 21)


*/