pre span.magic.strict.highlighter
{
    color: darkviolet;
    font-weight: bold;
}

pre span.comment.text.highlighter,
pre span.comment.block.highlighter,
pre span.comment.single.php.alternative.highlighter, /* ??? */
pre span.comment.html.highlighter
{
    color: green;
}
pre span.comment.block.pascal.highlighter
{
    color: #367
}

pre span.keyword.highlighter,
pre span.selector.highlighter,
pre span.storage.module.highlighter,
pre span.storage.class.highlighter,
pre span.storage.function.highlighter
{
    color: blue;
    font-weight: normal;
}

pre span._custom-word_.highlighter {
    color: slateBlue;
}

pre span.literal.keyword.highlighter
{
    color: darkviolet;
}

pre span.literal.keyword.highlighter,
pre span.constant.value.numeric.highlighter,
pre span.constant.value.character.highlighter,
pre span.unit.highlighter
{
    font-weight: normal;
    color: darkRed;
}

/* ???????????????????????????????????????????????????? */

pre span.entity.label.highlighter
{
    background-color: red;
}

pre span.preprocessor.keyword.highlighter
{
    color: steelBlue;
    font-weight: bold
}
pre span.preprocessor.value.highlighter
{
    color: sandybrown;
    font-weight: bold
}

pre span.operator.highlighter
{
    color: darkMagenta;    
}

pre span.property.highlighter,
pre span.constant.language.highlighter
{
    color: #038;
    font-weight: bold
}

pre span.constant.symbol.highlighter,
pre span.class.highlighter
{
    color: #036;
    font-weight: bold
}

pre span.keyword.namespace.highlighter,
pre span.entity.name.class.highlighter
{
    color: #B06;
    font-weight: bold
}

pre span.literal.string.highlighter,
pre span.literal.quote.highlighter,
pre span.literal.escape.highlighter
{
    color: #AA3300;
}

pre span.comment.docstring.highlighter /* python */
{
    color: darkMagenta;
}

pre span.string.regexp.highlighter { /* ??? */
    background-color: #FFF0FF;
    color: #808
}

pre span.variable.highlighter,
pre span.variable.instance.highlighter
{
    color: #33B
}

pre span.entity.name.function.highlighter {
    color: #06B;
    font-weight: bold
}

pre span.support.tag.highlighter,
pre span.support.tag-name.highlighter,
pre span.entity.tag.script.highlighter,
pre span.entity.tag.style.highlighter
{
    color: #070
}

pre span.support.attribute.highlighter
{
    color: #007;
    font-style: italic
}

pre span.entity.name.tag.highlighter,
pre span.storage.type.highlighter
{
    color: #070;
    font-weight: bold
}

pre span.variable.self.highlighter,
pre span.support.function.highlighter {
    color: #038;
    font-weight: bold
}

pre span.entity.function.highlighter,
pre span.support.magic.highlighter
{
    color: #C00;
    font-weight: bold
}

pre span.preprocessor.highlighter,
pre span.meta.preprocessor.highlighter
{
    color: rebeccaPurple;
    font-weight: bold
}

pre span.pascal.assignment.highlighter
{
    color: blue;
    font-weight: bold
}

/* Visual Studio:
VS C#, JavaScript: )
Types: steel blue rgb(43, 145, 175)
Well-known types and reserved words: blue 0x0000FF
Comment: green 0x00FF00
String: darkRed, rgb(163, 21, 21)
Url in comments: darker blue
preprocessor: gray
---
VS C++:
Same
keywords: magenta/violet rgb(143, 8, 196)
Macros: rgb(138, 27, 255)
Operator functions: 0x00FFFF
---
VS JSON:
properties: blue rgb(46, 117, 182)
string as above
---
VS Java:
Same 
Types and function names: steel blue
---
VS CSS: comment: rgb(0, 100, 0)
CSS: keyword: 0xFF00FF
CSS: property: red
CSS: value: blue
CSS: selector: rgb(128, 0, 0)
CSS: string: blue
---
VS HTML:
comment: rgb(0, 100, 0)
element name: rgb(128, 0, 0)
entity: red
operator: blue
tag delimiter: blue
---
VS General:
User types: rgb(43, 145, 175)
String: darkRed, rgb(163, 21, 21)
*/

/* reduced language set:
// +: used in styles, ?: unused
+ literal.string (base.string-c, base.string-c, base.apostrophe-string, base.apostrophe-string, css, css, html, javascript, javascript, json, json, pascal, pascal)
+ literal.escape (base.string-c, base.string-c, base.apostrophe.character, base.apostrophe.character, base.apostrophe-string, base.apostrophe-string, javascript, javascript)
+ constant.value.character (base.apostrophe.character, base.apostrophe.character)
+ comment.text (base.comment-c, base.comment-c, base.comment-number-sign, base.comment-number-sign, css, css, java, java, pascal, pascal)
+ comment.block (base.comment-block-c, base.comment-block-c, html, html)
+ constant.value.numeric (base.numeric, base.numeric)
+ preprocessor.keyword (c, c, cpp, cpp)
+ meta.preprocessor (c, c)
+ keyword (c, c, cpp, cpp, csharp, csharp, java, java, java, javascript, javascript, javascript, pascal, pascal)
+ storage.type (c, c)
+ entity.name.function (c, c, javascript)
? storage.modifier (c, c)
+ literal.keyword (csharp, csharp, javascript, java)
+ type.keyword (csharp, csharp, javascript, java)
? constant.numeric (css)
+ unit (css)
? support.css-property (css, css)
? support.vendor-prefix (css, css)
? support.css-value (css)
? source.php (html, html)
? variable.language.php-tag (html, html)
? php (html)
? source.css (html, html)
? support.tag.style (html, html, html, html)
? css (html)
+ entity.tag.style (html)
? source.js (html, html)
? support.tag.script (html, html, html, html)
? javascript (html)
+ entity.tag.script (html)
? support.tag.open (html)
? support.tag.close (html)
+ support.tag (html, html, html)
? support.tag.special (html)
+ support.tag-name (html)
+ support.attribute (html, html)
? support.operator (html, html)
+ literal.quote (html, html)
? support.value (html)
================================ Java + keyword + constant.keyword
? support.namespace (java) namespace name
? char (java, java)
? integer (java, java)
? support.annotation (java, java)
+ entity.function (java)
? entity.class (java, java)
+ operator (java, java, json, json, pascal, pascal)
================================
+ magic.strict (javascript, javascript)
+ property (json, json)
+ comment.block.pascal (pascal, pascal)
+ pascal.assignment (pascal, pascal)
*/
